% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/packages.R
\name{packagesInModules}
\alias{packagesInModules}
\alias{metadataInModules}
\title{Extract element from SpaDES module metadata}
\usage{
packagesInModules(modules, modulePath = getOption("spades.modulePath"))

metadataInModules(
  modules,
  metadataItem = "reqdPkgs",
  modulePath = getOption("spades.modulePath"),
  needUnlist,
  verbose = getOption("Require.verbose", 1L)
)
}
\arguments{
\item{modules}{character vector of module names}

\item{modulePath}{path to directory containing the module(s) named in \code{modules}}

\item{metadataItem}{character identifying the metadata field to extract}

\item{needUnlist}{logical indicating whether to \code{unlist} the resulting metadata look up}

\item{verbose}{Numeric or logical indicating how verbose should the function
be. If -1 or -2, then as little verbosity as possible. If 0 or FALSE,
then minimal outputs; if \code{1} or TRUE, more outputs; \code{2} even more. NOTE: in
\code{Require} function, when \code{verbose >= 2}, also returns details as if
\code{returnDetails = TRUE} (for backwards compatibility).}
}
\value{
A character vector of sorted, unique packages that are identified in all named
modules, or if \code{modules} is omitted, then all modules in \code{modulePath}.
}
\description{
Parses module code, looking for the \code{metadataItem} (default = \code{"reqdPkgs"})
element in the \code{defineModule} function.
}
